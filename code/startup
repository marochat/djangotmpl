#!/bin/bash
echo project name is $DJANGO_NAME .
#
if [ -z $DJANGO_NAME ]; then
    echo env:DJANGO_NAME must be defined as project name.
    exit 1
fi

# construction of main project if not exist project directory
if [ ! -d $DJANGO_NAME ]; then
    echo project folder '$DJANGO_NAME' is not exist, now initialize project.
    # Initialize django project name as 
    django-admin startproject $DJANGO_NAME
    # edit settings.py
    pushd ${DJANGO_NAME}/${DJANGO_NAME}
    if [ -f settings.py ]; then
        echo Edit settings.py ....
        cat settings.py \
            | sed -r "s/^ALLOWED_HOSTS.+$/ALLOWED_HOSTS \= \['*'\]/g" > tmpfile
        rm settings.py
        mv tmpfile settings.py
    fi
    popd
fi

# enter to project directory. exit if not exist target directory.
cd ${DJANGO_NAME} || exit 1
if [ ! -z ${DJANGO_SPAPP} ] && [ ! -d ${DJANGO_SPAPP} ]; then
    python manage.py startapp ${DJANGO_SPAPP}
fi

# bootstrap などスタティック領域初期化
CUSTOM_SCSS=bootstrap-custom.scss
CUSTOM_CSS=bootstrap-custom.css
if [ ! -d 'static' ]; then mkdir static; fi
pushd static
if [ ! -d 'css' ]; then mkdir css; fi
cd css

# bootstrap 導入
# シンボリックリンクでは静的アクセス(nginx service)からアクセス出来ない
# 問題があったのでコピーに変更
if [ ! -d 'bootstrap' ]; then
    rm -rf bootstrap
fi
cp -rf /usr/local/lib/node_modules/bootstrap .

# カスタムSCSSのテンプレート作成と監視型コンパイラ起動
if [ ! -f ${CUSTOM_SCSS} ]; then
    cat <<EOS > ${CUSTOM_SCSS}
/*
$ sass bootstrap-custom.scss bootstrap-custom.css
*/
@import "bootstrap/scss/bootstrap.scss";
EOS
fi
sass --watch ${CUSTOM_SCSS}:${CUSTOM_CSS} &
popd

# jsディレクトリ更新:bootstrapなどからのリンク生成
pushd static
if [ ! -d 'js' ]; then mkdir js; fi
cd js
# シンボリックリンクを張り直す
find . -maxdepth 1 -type l -delete
ln -s ../css/bootstrap/dist/js/* .
popd

# uwsgiデーモン起動
uwsgi --socket :8001 --module ${DJANGO_NAME}.wsgi --uid www-data --py-autoreload 1
