#!/bin/bash
echo project name is $DJANGO_NAME .
#
sudo chown www-data.www-data . || exit 1

if [ -z $DJANGO_NAME ]; then
    echo env:DJANGO_NAME must be defined as project name.
    exit 1
fi
if [ -z $DJANGO_SPAPP ]; then
    echo env:DJANGO_SPAPP must be defined as application name.
    exit 1
fi

if [ $CLEARSITE = 1 ] && [ -d $DJANGO_NAME ] ; then
    rm -rf $DJANGO_NAME
fi    

# ----------------------
# 環境変数 ツールバージョン
# ----------------------
PYTHON_VERSION=`python --version`
NODEJS_VERSION=`node --version`
TYPESCRIPT_VERSION=`tsc --version`
SASS_VERSION=`sass --version`

# -----------------------------------------------------------
# プロジェクト初期化
# -----------------------------------------------------------
# construction of main project if not exist project directory
if [ ! -d $DJANGO_NAME ]; then
    echo project folder '$DJANGO_NAME' is not exist, now initialize project.
    # Initialize django project name as 
    django-admin startproject $DJANGO_NAME
    # edit settings.py
    pushd ${DJANGO_NAME}/${DJANGO_NAME}
    if [ -f settings.py ]; then
        echo Edit settings.py ....
        # edit:
        # ALLOWED_HOSTS to all & USE_L10N = True & LANGUAGE -> ja-JP
        cat settings.py \
            | sed -r "s/^ALLOWED_HOSTS.+$/ALLOWED_HOSTS \= \['*'\]/g" \
            | sed -r "/^USE_TZ = True$/iUSE_L10N = True\n" \
            | sed -r "s/^LANGUAGE_CODE = .+$/LANGUAGE_CODE = 'ja-JP'/g" \
            | sed -r "s/TIME_ZONE = .+$/TIME_ZONE = 'Asia\/Tokyo'/g" > tmpfile
        rm settings.py
        mv tmpfile settings.py
    fi
    popd
fi
#----------------------------------------------------------------
# シングルページ APP 初期化
#----------------------------------------------------------------
# enter to project directory. exit if not exist target directory.
cd ${DJANGO_NAME} || exit 1
if [ ! -z ${DJANGO_SPAPP} ] && [ ! -d ${DJANGO_SPAPP} ]; then
    python manage.py startapp ${DJANGO_SPAPP}
    # APPCAP capitalize of application name.
    APPCAP=$(echo ${DJANGO_SPAPP} | sed 's/\(.\)\(.*\)/\U\1\L\2/g')
    # app config name.
    APPCONFIG=${DJANGO_SPAPP}.apps.${APPCAP}Config
    # make log directory
    if [ ! -d logs ]; then mkdir logs; fi
    pushd ${DJANGO_NAME}
    # edit settings.py
    #   installed apps <-- spapp
    #   add import library
    #   add common template directory
    # 一時的な置換文字列
    builtin_bootstrap_setting_replace='*****builtin_bootstrap_replace_point*****'
    cat settings.py \
        | sed -zr "s/(\nINSTALLED_APPS = \[\n)/\1    '${APPCONFIG}',\n/g" \
        | sed -zr "s/(\nINSTALLED_APPS = \[\n[^]]*)(\])/\1    'tinymce',\n    'django_bootstrap5',\n\2/g" \
        | sed -r "/^from pathlib/iimport os" \
        | sed -r "/^from pathlib/aimport structlog" \
        | sed -zr "s/(\nMIDDLEWARE = \[\n[^]]*)(\])/\1    'django_structlog.middlewares.RequestMiddleware',\n\2/g" \
        | sed -zr "s/(\nTEMPLATES = .+'DIRS': )\[\]/\1[os.path.join(BASE_DIR, 'templates')]/g" \
        | sed -zr "s/(\s*)('context_processors':[^]]*)(\])/\1\2    '${DJANGO_NAME}.context_processors.constant_text',\1\3/g" \
        | sed -zr "s/('context_processors':[^]]*)(\],)/\1\2\n${builtin_bootstrap_setting_replace}/g" > tmpfile
        rm settings.py
        # 一時文字列に置換した部分を設定項目の行に置き換える
        builtin_bootstrap_replace_line=$(grep -nF ${builtin_bootstrap_setting_replace} tmpfile | sed -r 's/:.*//g')
        sed -n "1,$((${builtin_bootstrap_replace_line} - 1))p" tmpfile > settings.py
        cat <<BUILTIN_BOOTSTRAP >> settings.py
            'builtins':[
                'django_bootstrap5.templatetags.django_bootstrap5',
            ],
BUILTIN_BOOTSTRAP
        sed "1,${builtin_bootstrap_replace_line}d" tmpfile >> settings.py
        rm tmpfile
    # add other settings
    # --- suructlog setting, from the official example and additional setting.
    cat <<STTINGS0 | sed -r "s/^ {8}//g" >> settings.py

        LOGGING = {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "json_formatter": {
                    "()": structlog.stdlib.ProcessorFormatter,
                    "processor": structlog.processors.JSONRenderer(),
                },
                "plain_console": {
                    "()": structlog.stdlib.ProcessorFormatter,
                    "processor": structlog.dev.ConsoleRenderer(),
                },
                "key_value": {
                    "()": structlog.stdlib.ProcessorFormatter,
                    "processor": structlog.processors.KeyValueRenderer(key_order=['timestamp', 'level', 'event', 'logger']),
                },
            },
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                    "formatter": "plain_console",
                },
                "json_file": {
                    "class": "logging.handlers.WatchedFileHandler",
                    "filename": "logs/access__json.log",  ##ここでjson形式のログファイルPathを指定する
                    "formatter": "json_formatter",
                },
                "flat_line_file": {
                    "class": "logging.handlers.WatchedFileHandler",
                    "filename": "logs/access__flat_line.log",  ##ここでflat_line形式のログファイルPathを指定する
                    "formatter": "key_value",
                },
                "syslog" : {
                    "class" : "logging.handlers.SysLogHandler",
                    "level" : "NOTSET",
                    "address" : "/dev/log",
                    "formatter" : "plain_console",
                },
            },
            "root" : {
                "handlers" : ["console"],
                "level" : "DEBUG",
            },
            "loggers": {
                "django_structlog": {
                    "handlers": ["console", "flat_line_file", "json_file"],
                    "level": "INFO",
                    "propagate" : False,
                },
                "django_structlog_demo_project": {
                    "handlers": ["console", "flat_line_file", "json_file"],
                    "level": "INFO",
                    "propegate" : False,
                },
                "debug" : {
                    "handlers" : ["console"],
                    "level" : "DEBUG",
                    "propegate" : False,
                },
            }
        }

        structlog.configure(
            processors=[
                structlog.stdlib.filter_by_level,
                structlog.processors.TimeStamper(fmt="iso"),
                structlog.stdlib.add_logger_name,
                structlog.stdlib.add_log_level,
                structlog.stdlib.PositionalArgumentsFormatter(),
                structlog.processors.StackInfoRenderer(),
                structlog.processors.format_exc_info,
                structlog.processors.UnicodeDecoder(),
                structlog.processors.ExceptionPrettyPrinter(),
                structlog.stdlib.ProcessorFormatter.wrap_for_formatter,
            ],
            context_class=structlog.threadlocal.wrap_dict(dict),
            logger_factory=structlog.stdlib.LoggerFactory(),
            wrapper_class=structlog.stdlib.BoundLogger,
            cache_logger_on_first_use=True,
        )
        # for bootstrap user override
        BOOTSTRAP5 = {
            "css_url": { "url":"/static/css/bootstrap-custom.css" },
            "javascript_url": { "url": "/static/js/bootstrap.bundle.js" },
        }
        BOOTSTRAP_CUSTOMPATH = os.path.join(BASE_DIR, 'static/css/bootstrap-custom.css')
        # for django-tinymce
        TINYMCE_DEFAULT_CONFIG = {
            'plugins': "table,spellchecker,paste,searchreplace,preview,textcolor,hr,link,code",
        }
        # for iFrame option
        X_FRAME_OPTIONS = 'ALLOW'
        # for Letsencrypt certification
        CERT_ROOT = os.path.join(BASE_DIR, '.well-known')
        CERT_URL = '/.well-known'
        
        # 環境変数
        PYTHON_VERSION = '${PYTHON_VERSION}'
        NODEJS_VERSION = '${NODEJS_VERSION}'
        TYPESCRIPT_VERSION = '${TYPESCRIPT_VERSION}'
        SASS_VERSION = 'SASS_VERSION'

STTINGS0
    # edit urls.py
    cat urls.py \
        | sed -r "s/^(from django.urls import ).+$/\1include, path/g" \
        | sed -r "/^urlpatterns/iimport tinymce\n" \
        | sed -zr "s/(\nurlpatterns = \[[^]]*)(\])/\1    path('', include('${DJANGO_SPAPP}.urls')),\n\2/g" \
        | sed -zr "s/(\nurlpatterns = \[[^]]*)(\])/\1    path('tinymce\/', include('tinymce.urls')),\n\2/g" > tmpfile
    rm urls.py
    mv tmpfile urls.py
    # make context_processors.py
    cat <<CONTEXTPRO | sed -r "s/^ {8}//g" > context_processors.py
        from django.conf import settings
        import django
        import platform
        import re

        def constant_text(reqest):
            bsv = ''
            with open(settings.BOOTSTRAP_CUSTOMPATH, 'r') as fh:
                for ln in fh:
                    if res := re.search('Bootstrap (v\S+)', ln):
                        bsv = res[1]
                        break
            return {
                'LANGUAGE_CODE': settings.LANGUAGE_CODE,
                'APP_NAME': '${DJANGO_NAME}',
                'PYTHON_VERSION': '( python : ' + platform.python_version() + ' )',
                'DJANGO_VERSION': django.get_version(),
                'BOOTSTRAP_VERSION': bsv,
                'TYPESCRIPT_VERSION': settings.TYPESCRIPT_VERSION,
                'SASS_VERSION': settings.SASS_VERSION,
            }
CONTEXTPRO
    popd
    # enter app directory
    pushd ${DJANGO_SPAPP} || exit 1
    if [ -f urls.py ]; then rm urls.py; fi
    # making app/urls.py
    cat <<APPURLS | sed -r "s/^ {8}//g" > urls.py
        from django.urls import path

        from . import views

        app_name = '${DJANGO_SPAPP}'

        urlpatterns = [
            path('', views.IndexView.as_view(), name='index'),
        ]
APPURLS
    # making app/views.py
    cat <<APPVIEWS | sed -r "s/^ {8}//g" >> views.py
        from django.views import generic
        from structlog import getLogger

        # logging sample
        logger = getLogger(__name__)

        class IndexView(generic.TemplateView):
            template_name = '${DJANGO_SPAPP}/index.html'

            def get_context_data(self, **kwargs):
                # logging sample
                logger.info("logging sample!")
                context = super().get_context_data(**kwargs)
                return context

APPVIEWS
    # making app/template HTML
    mkdir templates
    mkdir templates/${DJANGO_SPAPP}
    pushd templates/${DJANGO_SPAPP}
    # template index.html
    cat <<APPTMPINDEX | sed -r "s/^ {8}//g" > index.html
        {% extends 'base.html' %}
        {% load static %}
        {% block content %}
        <h2>This site is not compatible with this browser</h2>
        <p>Consider migrating to the latest ES6-enabled browser</p>
        <!--<p>
            this is sample page<br/>
            <span id="1"></span>
        </p>-->
        {% endblock %}
        {% block scripthead %}
        <!--
        <script type="text/javascript" src="{% static '${DJANGO_SPAPP}/js/${DJANGO_SPAPP}.js' %}">
        </script>
        -->
        {% endblock %}
        {% block script %}
        <script type="module">
            import {init} from "{% static '${DJANGO_SPAPP}/js/${DJANGO_SPAPP}.js' %}"
            window.addEventListener("load", init());
        </script>
        {% endblock %}
APPTMPINDEX
    popd
    popd
    # making common template base.html
    if [ ! -d 'templates' ]; then mkdir templates; fi
    pushd templates || exit 1
    cat <<APPTMPBASE | sed -r "s/^ {8}//g" > base.html
        <!doctype html>
        <html lang="ja">
        {% load static %}
        {% load django_bootstrap5 %}
        <head>
            <meta http-equiv="Content-type" content="text/html; charset=utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <meta name="keywords" content="{% block meta_keywords %}{% endblock %}">
            <meta name="description" content="{% block meta_description %}{% endblock %}">
            <title>${DJANGO_NAME}{% block title_info %}{% endblock %}</title>
            <link rel="icon" href="{% static 'img/favicon.ico' %}">
            <meta name="google-site-verification" content="KQ5nKoMUl_r-A1yDZXwTkCW70M9eBFxXoy-rEZ6ugbQ" />
            <style type="text/css">
            @import  "{% static 'css/bootstrap-custom.css' %}";
            </style>
            <script type="module">
            import { Alert, Button, Carousel, Collapse, Dropdown, Modal, Offcanvas, Popover, ScrollSpy, Tab, Toast, Tooltip } from "{% static 'js/bootstrap.esm.js' %}"
            </script>
        </head>
        <body>
            <nav>dummy navigation bar</nav>
            <main>
                <article>
                    {% block content %}
                    {% endblock %}
                </article>
                <footer>
                    {% block footer %}{% endblock %}
                    <hr/>
                    <div>
                    <span>Copyright &copy; Django sample template Site</span>
                    <span>/ Powerd by bootstrap
                    {{ BOOTSTRAP_VERSION }} &amp; django ver. {{ DJANGO_VERSION }} {{ PYTHON_VERSION }}</span>
                    </div>
                </footer>
            </main>
            {% block script %}{% endblock %}
        </body>
        </html>
APPTMPBASE
    popd
    # migration for first database
    python manage.py migrate
    # create super user via django shell
    # 参考サイト： https://www.delftstack.com/ja/howto/django/create-superuser-django/
    cat <<CREATESUPER | sed -r "s/^\s*//g" | python manage.py shell
        from django.contrib.auth import get_user_model
        User = get_user_model()
        User.objects.create_superuser('admin' ,'', 'admin')
CREATESUPER
fi
# ---------------------------------------------
# CSS領域 (bootstrap) などスタティック領域初期化
# ---------------------------------------------
CUSTOM_STYLE=bootstrap-custom
CUSTOM_SCSS=${CUSTOM_STYLE}.scss
CUSTOM_CSS=${CUSTOM_STYLE}.css
if [ ! -d 'static' ]; then mkdir static; fi
pushd static
if [ ! -d 'css' ]; then mkdir css; fi
cd css

# bootstrap 導入
# シンボリックリンクでは静的アクセス(nginx service)からアクセス出来ない
# 問題があったのでコピーに変更
if [ ! -d 'bootstrap' ]; then
    rm -rf bootstrap
fi
cp -rf /usr/local/lib/node_modules/bootstrap .

# カスタムSCSSのテンプレート作成と監視型コンパイラ起動
if [ ! -f ${CUSTOM_SCSS} ]; then
    cat <<EOS | sed -r "s/^ {8}//g" > ${CUSTOM_SCSS}
        /*
        $ sass bootstrap-custom.scss bootstrap-custom.css
        */
        @import "bootstrap/scss/bootstrap.scss";

        nav {
            @extend .navbar, .navbar-expand-md, .navbar-dark, .text-light, .bg-dark, .px-3;
            a.brand {
                @extend .navbar-brand;
            }
            label {
                @extend .navbar-brand, .btn, .m-0;
            }
            button {
                @extend .navbar-toggler;
                span {
                    @extend .navbar-toggler-icon;
                }
            }
            div {
                ul {
                    @extend .navbar-nav, .me-auto;
                    li {
                        @extend .nav-item, .active;
                    }
                }
                a {
                    @extend .nav-link;
                }
                a.btn {
                    @extend .btn, .btn-outline-success, .my-2, .my-sm-0;
                }
            }
        }
        main {
            @extend .container-fluid;
            header {
                @extend .container, .my-2, h4;
                figcaption {
                    font-size: 10px;
                    font-weight: normal;
                    text-align: right;
                    width: 100%;
                }
            }
            footer {
                @extend .container, .my-2;
                text-align: right;
                span {
                    @expand .text-muted;
                    font-size: small;
                    font-style: italic;
                    display: inline-block;
                }
            }
            article {
                @extend .container, .my-2;
                header {
                    @extend h5;
                }
            }
            @mixin side-card {
                @extend .px-0, .mx-0, .my-2;
                aside {
                    @extend .card-body;
                    header {
                        @extend h4, .card-title, .btn, .rounded-pill, .btn-outline-dark;
                    }
                    ul {
                        @extend .list-group, .list-group-flush;
                        li {
                            @extend .list-group-item;
                        }
                        a {
                            @extend .h6, .small;
                        }
                    }
                }
            }
            @mixin columns-3(\$start, \$center, \$end) {
                @extend .row, .justify-content-md-center;
                div.column-start {
                    @extend .order-2, .order-md-1, .col-md-#{\$start}, .px-1;
                    div.card {
                        @include side-card();
                    }
                }
                div.column-center {
                    @extend .col-12, .order-1, .order-md-2, .col-md-#{\$center}, .px-1, .mx-0;
                }
                div.column-end {
                    @extend .order-3, .order-md-3, .col-md-#{\$end}, .px-1;
                    div.card {
                        @include side-card();
                    }
                }
            }
            div.column3 {
                @include columns-3(2,7,3);
            }
            div.column3x {
                @include columns-3(1,10,1);
            }
        }
EOS
fi
sass --watch ${CUSTOM_SCSS}:${CUSTOM_CSS} >& sass.log &
popd

# tinymce
pushd static
if [ -d tinymce ]; then rm -rf tinymce; fi
cp -rf $(python -c "import site; print (site.getsitepackages()[0])")/tinymce/static/tinymce .
popd

# --------------------------------------------------
# jsディレクトリ更新:bootstrapなどからのリンク生成
# --------------------------------------------------
pushd static
if [ ! -d 'js' ]; then mkdir js; fi
cd js
# シンボリックリンクを張り直す -> コピーに変更
#find . -maxdepth 1 -type l -delete
cp -rf ../css/bootstrap/dist/js/* .
cp -rf ../css/bootstrap/node_modules/@popperjs .
# bootstrap.esm.js のimportパスの修正（先頭に popper.js への相対パスに変更）
cat bootstrap.esm.js \
    | sed -r "s/^(import .* as Popper from .*').+(';)$/\1.\/@popperjs\/core\/dist\/esm\/popper.js\2/g" > tmpfile
rm bootstrap.esm.js
mv tmpfile bootstrap.esm.js
popd

# javascript(typescript) sample initialize
pushd static
if [ ! -d ${DJANGO_SPAPP} ]; then
    mkdir ${DJANGO_SPAPP}
    mkdir ${DJANGO_SPAPP}/js
    mkdir ${DJANGO_SPAPP}/ts
    cd ${DJANGO_SPAPP}/ts || exit 1
    tsc --init
    # tsconfig 編集 for フロントエンド
    cat tsconfig.json \
      | sed -r "s/^(\s*\"module\": )\"commonjs\"(.*)$/\1\"esnext\"\2/g" > tmpfile
    rm tsconfig.json
    mv tmpfile tsconfig.json
    SPASCRIPT=${DJANGO_SPAPP}.ts
    cat <<SPASCRIPTCODE | sed -r "s/^ {8}//g" > ${SPASCRIPT}
        export let init = () => {
        var sp1 = document.getElementById("1");
        sp1!.innerHTML = "javascript sample text";
        }
SPASCRIPTCODE
    cd ../../
fi
cd ${DJANGO_SPAPP}/ts || exit 1
tsc -p . --outDir ../js -w &> tscout.log &
popd


# admin用のstaticデータを静的領域にコピーする
pushd static
echo copy to static admin.
if [ -d admin ]; then rm -rf admin; fi
cp -rf $(python -c "import site; print (site.getsitepackages()[0])")/django/contrib/admin/static/admin . || exit 1
popd

# uwsgiデーモン起動
uwsgi --socket :8001 --module ${DJANGO_NAME}.wsgi --uid www-data --py-autoreload 1
